"""
üöÄ ULTRA BOT - –ü—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è Murder Mystery 2
–í–µ—Ä—Å–∏—è 3.0 - Ultimate Performance Edition

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
‚ú® –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
‚ú® –ú—É–ª—å—Ç–∏—Ü–µ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
‚ú® –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ—Ä–æ–≥–æ–≤ —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º
‚ú® –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (GPU/CPU)
‚ú® –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —Ü–µ–ª–µ–π —Å –º–∞–ø–ø–∏–Ω–≥–æ–º –ª–æ–∫–∞—Ü–∏–π
‚ú® –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–µ–π
‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""

import sys
import os
import argparse
import time
import cv2
import numpy as np
import torch
import json
import random
import keyboard
from collections import deque
from datetime import datetime
from enum import Enum
from typing import Optional, List, Dict, Tuple
import threading

sys.path.insert(0, os.path.dirname(__file__))

from ultralytics import YOLO
from roblox.screen import CaptureStream
from roblox.control import Control
from roblox.utils import FrameCounter

# –ò–º–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç
try:
    from bot_utils_enhanced import (
        TargetTracker, PerformanceMonitor, SmartSearchEngine,
        AdaptiveController, calculate_target_priority
    )
except ImportError:
    print("[WARN] bot_utils_enhanced –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")


class BotState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    INITIALIZING = "initializing"
    SEARCHING = "searching"
    APPROACHING = "approaching"
    COLLECTING = "collecting"
    RETREATING = "retreating"
    STUCK = "stuck"


class UltraBot:
    """
    –ü—Ä–µ–º–∏—É–º –±–æ—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –¥–ª—è —Å–±–æ—Ä–∞ –º–æ–Ω–µ—Ç/–º—è—á–∏–∫–æ–≤
    """
    
    def __init__(
        self,
        weights_path: str,
        player_weights_path: Optional[str] = None,
        conf_thres: float = 0.22,
        show_window: bool = True,
        performance_mode: str = "balanced"
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º –±–æ—Ç–∞
        
        Args:
            weights_path: –ü—É—Ç—å –∫ –≤–µ—Å–∞–º –º–æ–¥–µ–ª–∏ –¥–ª—è –º–æ–Ω–µ—Ç
            player_weights_path: –ü—É—Ç—å –∫ –≤–µ—Å–∞–º –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            conf_thres: –ë–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            show_window: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–∫–Ω–æ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
            performance_mode: –†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ("speed", "balanced", "accuracy")
        """
        print("=" * 60)
        print("üöÄ ULTRA BOT v3.0 - Ultimate Performance Edition")
        print("=" * 60)
        
        # === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ ===
        self.device = self._init_device()
        print(f"[INFO] Device: {self.device}")
        
        print(f"[LOAD] –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: {weights_path}")
        self.model = YOLO(weights_path)
        if self.device.type == 'cuda':
            self.model.to(self.device)
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è CUDA
            torch.backends.cudnn.benchmark = True
            torch.backends.cudnn.deterministic = False
        
        self.player_model = None
        if player_weights_path and os.path.exists(player_weights_path):
            print(f"[LOAD] –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤: {player_weights_path}")
            self.player_model = YOLO(player_weights_path)
            if self.device.type == 'cuda':
                self.player_model.to(self.device)
        
        # === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===
        self.performance_mode = performance_mode
        self._setup_performance_mode()
        
        # === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞ ===
        print("[INIT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞...")
        self.stream = CaptureStream("Roblox", saveInterval=0)
        
        # === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ===
        self.control = Control()
        self.frame_counter = FrameCounter(interval=3)
        self.frame_counter.fps = 0.0
        
        # === –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ ===
        self.state = BotState.INITIALIZING
        self.previous_state = None
        
        # === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ ===
        self.base_conf_thres = conf_thres
        self.conf_thres = conf_thres
        self.adaptive_confidence = True
        self.conf_history = deque(maxlen=100)
        
        # === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–≤–∏–∂–µ–Ω–∏—è ===
        self.min_distance = 48  # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–±–æ—Ä–∞
        self.turn_threshold = 20
        self.approach_threshold = 180
        
        # === –£–ª—É—á—à–µ–Ω–Ω—ã–π PID –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä ===
        self._init_pid_controller()
        
        # === –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ===
        self._init_navigation()
        
        # === –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —Ü–µ–ª–µ–π ===
        self.target_memory = deque(maxlen=15)
        self.memory_retention = 3.0  # —Å–µ–∫—É–Ω–¥
        self.location_map = {}  # –ö–∞—Ä—Ç–∞ –ª–æ–∫–∞—Ü–∏–π
        
        # === –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ ===
        self._init_search_system()
        
        # === –ê–Ω—Ç–∏–∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ ===
        self.stuck_detection = {
            'frames': 0,
            'threshold': 20,
            'last_position': None,
            'position_history': deque(maxlen=10)
        }
        
        # === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
        self.stats = {
            'start_time': time.time(),
            'detections': 0,
            'collections': 0,
            'search_cycles': 0,
            'stuck_events': 0,
            'avg_fps': 0.0,
            'avg_confidence': 0.0,
            'state_history': deque(maxlen=100)
        }
        
        # === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
        self.show_window = show_window
        self.window_name = "Ultra Bot - Live View"
        if self.show_window:
            self._init_visualization()
        
        # === –£—Ç–∏–ª–∏—Ç—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã) ===
        try:
            self.target_tracker = TargetTracker(max_history=15)
            self.performance_monitor = PerformanceMonitor()
            self.search_engine = SmartSearchEngine()
            self.adaptive_controller = AdaptiveController()
        except NameError:
            print("[INFO] –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
            self.target_tracker = None
            self.performance_monitor = None
            self.search_engine = None
            self.adaptive_controller = None
        
        # === –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ===
        self.stop_requested = False
        self._setup_stop_handler()
        
        print("\n[OK] ‚ú® Ultra Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print(f"[INFO] –†–µ–∂–∏–º: {performance_mode}")
        print(f"[INFO] Conf threshold: {self.conf_thres}")
        print(f"[INFO] Device: {self.device}")
        print("\n[START] Ctrl+C –∏–ª–∏ 'Q' –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
    
    def _init_device(self) -> torch.device:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        if torch.cuda.is_available():
            device = torch.device("cuda:0")
            torch.cuda.set_device(device)
            gpu_name = torch.cuda.get_device_name(0)
            memory_gb = torch.cuda.get_device_properties(0).total_memory / 1e9
            print(f"[GPU] {gpu_name} ({memory_gb:.1f} GB)")
            return device
        else:
            print("[CPU] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
            return torch.device("cpu")
    
    def _setup_performance_mode(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if self.performance_mode == "speed":
            self.predict_size = 320
            self.frame_skip = 2
            self.multi_scale = False
            self.use_half_precision = True
        elif self.performance_mode == "accuracy":
            self.predict_size = 640
            self.frame_skip = 0
            self.multi_scale = True
            self.use_half_precision = False
        else:  # balanced
            self.predict_size = 416
            self.frame_skip = 1
            self.multi_scale = True
            self.use_half_precision = self.device.type == 'cuda'
        
        self.frame_counter_internal = 0
    
    def _init_pid_controller(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ PID –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        self.pid = {
            'kp': 0.045,
            'ki': 0.0012,
            'kd': 0.028,
            'integral': 0.0,
            'prev_error': 0.0,
            'dt': 0.05,
            'integral_limit': 120.0,
            'alpha': 0.3  # EMA –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        }
    
    def _init_navigation(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        self.current_target = None
        self.target_history = deque(maxlen=10)
        self.smoothed_target = None
        self.smoothing_alpha = 0.35
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        self.trajectory_predictor = {
            'history': deque(maxlen=5),
            'velocity': [0.0, 0.0],
            'prediction_horizon': 3
        }
    
    def _init_search_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞"""
        self.search = {
            'phase': 'scanning',  # scanning, moving, exploring
            'direction': 'right',
            'scan_duration': 1.8,
            'move_duration': 1.2,
            'phase_start_time': time.time(),
            'frustration_level': 0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–ª–≥–æ–º –ø–æ–∏—Å–∫–µ
        }
        
        self.frames_without_targets = 0
        self.search_threshold = 10
    
    def _init_visualization(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            test_img = np.zeros((100, 100, 3), dtype=np.uint8)
            cv2.imshow(self.window_name, test_img)
            cv2.waitKey(1)
            cv2.destroyAllWindows()
            print("[OK] –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            print(f"[WARN] –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            self.show_window = False
    
    def _setup_stop_handler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            keyboard.add_hotkey('q', self._request_stop)
            keyboard.add_hotkey('esc', self._request_stop)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: {e}")
    
    def _request_stop(self):
        """–ó–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        if not self.stop_requested:
            print("\n[STOP] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞...")
            self.stop_requested = True
    
    def adaptive_confidence_adjustment(self, detections: List[Dict]):
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        if not self.adaptive_confidence:
            return
        
        if len(detections) > 0:
            avg_conf = np.mean([d['conf'] for d in detections])
            self.conf_history.append(avg_conf)
            
            if len(self.conf_history) >= 20:
                recent_avg = np.mean(list(self.conf_history)[-20:])
                recent_std = np.std(list(self.conf_history)[-20:])
                
                # –£–º–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if recent_avg > 0.65 and recent_std < 0.1:
                    # –ú–Ω–æ–≥–æ —É–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ü–∏–π - –ø–æ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥
                    self.conf_thres = min(0.4, self.base_conf_thres + 0.08)
                elif recent_avg < 0.35 and recent_std > 0.15:
                    # –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ - —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥
                    self.conf_thres = max(0.15, self.base_conf_thres - 0.05)
                else:
                    # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∞–∑–æ–≤–æ–º—É
                    self.conf_thres = self.base_conf_thres
        else:
            # –ù–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–π - –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥
            self.frames_without_targets += 1
            if self.frames_without_targets > 30:
                self.conf_thres = max(0.12, self.conf_thres - 0.01)
    
    def find_targets(self, results, frame_shape: Tuple[int, int]) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–ª–∏"""
        frame_h, frame_w = frame_shape[:2]
        center_x = frame_w / 2
        center_y = frame_h / 2
        
        targets = []
        boxes = results[0].boxes
        
        if boxes is not None and len(boxes) > 0:
            for i in range(len(boxes)):
                conf = boxes.conf[i].item()
                cls = int(boxes.cls[i].item())
                
                if cls == 0 and conf >= self.conf_thres:
                    xyxy = boxes.xyxy[i].cpu().numpy()
                    x1, y1, x2, y2 = xyxy
                    
                    cx = (x1 + x2) / 2
                    cy = (y1 + y2) / 2
                    
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
                    norm_x = cx / frame_w
                    norm_y = cy / frame_h
                    
                    if norm_y < 0.18 or norm_x < 0.08 or norm_x > 0.92:
                        continue
                    
                    distance = np.sqrt((cx - center_x)**2 + (cy - center_y)**2)
                    
                    # –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                    priority = self._calculate_priority(cx, cy, conf, distance, frame_shape)
                    
                    targets.append({
                        'cx': cx,
                        'cy': cy,
                        'conf': conf,
                        'distance': distance,
                        'priority': priority,
                        'bbox': xyxy,
                        'area': (x2 - x1) * (y2 - y1)
                    })
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        targets.sort(key=lambda t: t['priority'], reverse=True)
        return targets
    
    def _calculate_priority(self, cx: float, cy: float, conf: float, 
                           distance: float, frame_shape: Tuple[int, int]) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ü–µ–ª–∏"""
        frame_h, frame_w = frame_shape[:2]
        center_x = frame_w / 2
        center_y = frame_h / 2
        
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        priority = conf * 150
        
        # –ë–æ–Ω—É—Å –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å –∫ —Ü–µ–Ω—Ç—Ä—É (X-–æ—Å—å –≤–∞–∂–Ω–µ–µ)
        center_dist_x = abs(cx - center_x)
        priority += max(0, 60 - center_dist_x / 6)
        
        # –ë–æ–Ω—É—Å –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å –∫ —Ü–µ–Ω—Ç—Ä—É (Y-–æ—Å—å)
        center_dist_y = abs(cy - center_y)
        priority += max(0, 50 - center_dist_y / 5)
        
        # –ë–æ–Ω—É—Å –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∏–≥—Ä–æ–∫—É
        priority += max(0, 100 - distance / 3)
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –ø–∞–º—è—Ç–∏)
        if self.target_memory:
            memory_bonus = self._get_memory_bonus(cx, cy, frame_shape)
            priority += memory_bonus
        
        return priority
    
    def _get_memory_bonus(self, cx: float, cy: float, frame_shape: Tuple[int, int]) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ—Ç –ø–∞–º—è—Ç–∏"""
        frame_h, frame_w = frame_shape[:2]
        max_bonus = 40.0
        
        for memory in self.target_memory:
            mem_cx = memory.get('cx', 0) * frame_w if 'cx' in memory else memory.get('cx_raw', 0)
            mem_cy = memory.get('cy', 0) * frame_h if 'cy' in memory else memory.get('cy_raw', 0)
            
            dist = np.sqrt((cx - mem_cx)**2 + (cy - mem_cy)**2)
            if dist < 80:  # –ï—Å–ª–∏ —Ü–µ–ª—å –±–ª–∏–∑–∫–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≤ –ø–∞–º—è—Ç–∏
                age = time.time() - memory.get('time', 0)
                freshness = max(0, 1.0 - age / self.memory_retention)
                return max_bonus * freshness
        
        return 0.0
    
    def update_memory(self, target: Dict, frame_time: float, frame_shape: Tuple[int, int]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Ü–µ–ª–µ–π"""
        frame_h, frame_w = frame_shape[:2]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        entry = {
            'cx': target['cx'] / frame_w,
            'cy': target['cy'] / frame_h,
            'cx_raw': target['cx'],
            'cy_raw': target['cy'],
            'conf': target['conf'],
            'priority': target['priority'],
            'time': frame_time
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        for memory in self.target_memory:
            dist = np.sqrt(
                (entry['cx'] - memory['cx'])**2 + 
                (entry['cy'] - memory['cy'])**2
            ) * frame_w
        
            if dist < 70:  # –ï—Å–ª–∏ —Ü–µ–ª—å —É–∂–µ –≤ –ø–∞–º—è—Ç–∏
                memory.update(entry)  # –û–±–Ω–æ–≤–ª—è–µ–º
                memory['time'] = frame_time
                return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å
        self.target_memory.append(entry)
    
    def clean_memory(self, current_time: float):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –ø–∞–º—è—Ç–∏"""
        self.target_memory = deque(
            [m for m in self.target_memory 
             if current_time - m.get('time', 0) < self.memory_retention],
            maxlen=15
        )
    
    def navigate_to_target(self, target: Dict, frame_shape: Tuple[int, int]) -> bool:
        """
        –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ü–µ–ª–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
        
        Returns:
            True –µ—Å–ª–∏ —Ü–µ–ª—å —Å–æ–±—Ä–∞–Ω–∞, False –∏–Ω–∞—á–µ
        """
        frame_h, frame_w = frame_shape[:2]
        center_x = frame_w / 2
        center_y = frame_h / 2
        
        cx = target['cx']
        cy = target['cy']
        distance = target['distance']
        
        # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–ª–∏
        if self.smoothed_target is None:
            self.smoothed_target = {'cx': cx, 'cy': cy}
        else:
            self.smoothed_target['cx'] = (
                self.smoothing_alpha * cx + 
                (1 - self.smoothing_alpha) * self.smoothed_target['cx']
            )
            self.smoothed_target['cy'] = (
                self.smoothing_alpha * cy + 
                (1 - self.smoothing_alpha) * self.smoothed_target['cy']
            )
        
        cx_smooth = self.smoothed_target['cx']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∞
        if distance < self.min_distance:
            self.control.release_all_keys()
            time.sleep(0.15)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–±–æ—Ä–∞
            print(f"[COLLECT] ‚ú® –°–æ–±—Ä–∞–Ω–æ! (conf: {target['conf']:.2f})")
            self.stats['collections'] += 1
            self._clean_target_memory(target, frame_shape)
            return True
        
        # PID –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞
        error = cx_smooth - center_x
        self.pid['integral'] += error * self.pid['dt']
        self.pid['integral'] = np.clip(
            self.pid['integral'], 
            -self.pid['integral_limit'], 
            self.pid['integral_limit']
        )
        
        derivative = (error - self.pid['prev_error']) / self.pid['dt'] if self.pid['dt'] > 0 else 0
        pid_output = (
            self.pid['kp'] * error +
            self.pid['ki'] * self.pid['integral'] +
            self.pid['kd'] * derivative
        )
        
        self.pid['prev_error'] = error
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
        self.control.release_all_keys()
        
        # –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
        self.control.press('up')
        
        # –ü–æ–≤–æ—Ä–æ—Ç/—Å—Ç—Ä–µ–π—Ñ
        if abs(error) > self.turn_threshold:
            if error < 0:
                # –°–ª–µ–≤–∞ - –ø–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ –∏–ª–∏ —Å—Ç—Ä–µ–π—Ñ
                if abs(error) > 60:
                    self.control.press('left')
                else:
                    self.control.press('turn_left')
            else:
                # –°–ø—Ä–∞–≤–∞ - –ø–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ –∏–ª–∏ —Å—Ç—Ä–µ–π—Ñ
                if abs(error) > 60:
                    self.control.press('right')
                else:
                    self.control.press('turn_right')
        
        # –í—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        move_time = max(0.08, min(0.18, abs(pid_output) / 100))
        time.sleep(move_time)
        
        # –ü—Ä—ã–∂–∫–∏ –¥–ª—è –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        if distance > 100 and random.random() < 0.15:
            self.control.press('jump')
            time.sleep(0.1)
        
        return False
    
    def _clean_target_memory(self, target: Dict, frame_shape: Tuple[int, int]):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ª–∏ –∏–∑ –ø–∞–º—è—Ç–∏"""
        frame_h, frame_w = frame_shape[:2]
        target_cx_norm = target['cx'] / frame_w
        target_cy_norm = target['cy'] / frame_h
        
        self.target_memory = deque(
            [m for m in self.target_memory
             if np.sqrt(
                 (m['cx'] - target_cx_norm)**2 + 
                 (m['cy'] - target_cy_norm)**2
             ) * frame_w > 60],
            maxlen=15
        )
    
    def check_stuck(self, current_position: Tuple[float, float]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ"""
        if self.stuck_detection['last_position'] is None:
            self.stuck_detection['last_position'] = current_position
            return False
        
        dx = abs(current_position[0] - self.stuck_detection['last_position'][0])
        dy = abs(current_position[1] - self.stuck_detection['last_position'][1])
        
        if dx < 5 and dy < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            self.stuck_detection['frames'] += 1
        else:
            self.stuck_detection['frames'] = 0
        
        self.stuck_detection['last_position'] = current_position
        
        if self.stuck_detection['frames'] >= self.stuck_detection['threshold']:
            self.stuck_detection['frames'] = 0
            return True
        
        return False
    
    def escape_stuck(self):
        """–ú–∞–Ω–µ–≤—Ä –≤—ã—Ö–æ–¥–∞ –∏–∑ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è"""
        print("[STUCK] –í—ã–ø–æ–ª–Ω—è—é –º–∞–Ω–µ–≤—Ä –≤—ã—Ö–æ–¥–∞...")
        self.stats['stuck_events'] += 1
        
        self.control.release_all_keys()
        
        # –û—Ç–∫–∞—Ç –Ω–∞–∑–∞–¥
        self.control.press('down')
        time.sleep(0.3)
        
        # –ü–æ–≤–æ—Ä–æ—Ç
        direction = random.choice(['turn_left', 'turn_right'])
        self.control.press(direction)
        time.sleep(0.4)
        
        # –†—ã–≤–æ–∫ –≤–ø–µ—Ä–µ–¥ —Å –ø—Ä—ã–∂–∫–æ–º
        self.control.release_all_keys()
        self.control.press('up')
        self.control.press('jump')
        time.sleep(0.3)
        
        self.control.release_all_keys()
        self.stuck_detection['last_position'] = None
    
    def search_pattern(self, current_time: float):
        """–£–º–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ–∏—Å–∫–∞"""
        phase = self.search['phase']
        phase_time = current_time - self.search['phase_start_time']
        
        self.control.release_all_keys()
        
        if phase == 'scanning':
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∫–∞–º–µ—Ä—ã
            if phase_time > self.search['scan_duration']:
                self.search['phase'] = 'moving'
                self.search['phase_start_time'] = current_time
                self.search['direction'] = random.choice(['turn_left', 'turn_right'])
            else:
                self.control.press(self.search['direction'])
        
        elif phase == 'moving':
            # –î–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            if phase_time > self.search['move_duration']:
                self.search['phase'] = 'scanning'
                self.search['phase_start_time'] = current_time
                self.search['direction'] = random.choice(['turn_left', 'turn_right'])
                self.stats['search_cycles'] += 1
            else:
                # –£–º–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                if random.random() < 0.7:
                    self.control.press('up')
                if random.random() < 0.3:
                    self.control.press(random.choice(['left', 'right']))
        
        time.sleep(0.1)
    
    def update_state(self, new_state: BotState):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        if new_state != self.state:
            self.previous_state = self.state
            self.state = new_state
            self.stats['state_history'].append({
                'state': new_state.value,
                'time': time.time()
            })
    
    def visualize(self, img: np.ndarray, targets: List[Dict], results=None):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"""
        if not self.show_window:
            return
        
        try:
            # –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if results is not None and len(results) > 0:
                annotated = results[0].plot()
            else:
                annotated = img.copy()
            
            h, w = annotated.shape[:2]
            
            # –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
            cv2.drawMarker(
                annotated, (w // 2, h // 2), 
                (0, 255, 255), 
                markerType=cv2.MARKER_CROSS, 
                markerSize=20, 
                thickness=2
            )
            
            # –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å
            if self.current_target:
                tx = int(self.current_target['cx'])
                ty = int(self.current_target['cy'])
                cv2.circle(annotated, (tx, ty), 12, (0, 255, 0), 3)
                cv2.putText(
                    annotated, "TARGET", 
                    (tx - 30, ty - 15),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2
                )
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
            info_y = 25
            cv2.putText(
                annotated, f"STATE: {self.state.value.upper()}", 
                (10, info_y), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2
            )
            info_y += 30
            cv2.putText(
                annotated, f"FPS: {self.frame_counter.fps:.1f}", 
                (10, info_y), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2
            )
            info_y += 25
            cv2.putText(
                annotated, f"Conf: {self.conf_thres:.2f} | Targets: {len(targets)}", 
                (10, info_y), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 0), 2
            )
            info_y += 25
            cv2.putText(
                annotated, f"Collections: {self.stats['collections']}", 
                (10, info_y), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 255), 2
            )
            
            # –ü–∞–º—è—Ç—å —Ü–µ–ª–µ–π
            for memory in self.target_memory:
                mx = int(memory.get('cx_raw', memory['cx'] * w))
                my = int(memory.get('cy_raw', memory['cy'] * h))
                cv2.circle(annotated, (mx, my), 5, (255, 165, 0), 1)
            
            cv2.imshow(self.window_name, annotated)
            
            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                self._request_stop()
        
        except Exception as e:
            print(f"[WARN] –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    
    def print_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        runtime = time.time() - self.stats['start_time']
        efficiency = (
            self.stats['collections'] / max(1, self.stats['detections']) * 100
            if self.stats['detections'] > 0 else 0
        )
        
        print("\n" + "=" * 60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–õ–¨–¢–†–ê –ë–û–¢–ê")
        print("=" * 60)
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime:.1f} —Å–µ–∫")
        print(f"üéØ –î–µ—Ç–µ–∫—Ü–∏–π: {self.stats['detections']}")
        print(f"‚ú® –°–æ–±—Ä–∞–Ω–æ: {self.stats['collections']}")
        print(f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}%")
        print(f"üîç –¶–∏–∫–ª–æ–≤ –ø–æ–∏—Å–∫–∞: {self.stats['search_cycles']}")
        print(f"üíæ –ü–∞–º—è—Ç—å —Ü–µ–ª–µ–π: {len(self.target_memory)}")
        print(f"üîß –ó–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–π: {self.stats['stuck_events']}")
        print(f"üìä –°—Ä–µ–¥–Ω–∏–π FPS: {self.frame_counter.fps:.1f}")
        print("=" * 60)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        print("[START] –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        try:
            prev_time = time.time()
            
            for img, img0 in self.stream:
                if self.stop_requested:
                    break
                
                current_time = time.time()
                self.pid['dt'] = current_time - prev_time
                prev_time = current_time
                
                # –ü—Ä–æ–ø—É—Å–∫ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                self.frame_counter_internal += 1
                if self.frame_counter_internal % (self.frame_skip + 1) != 0:
                    continue
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
                img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)
                frame_shape = img.shape
                
                # –î–µ—Ç–µ–∫—Ü–∏—è
                results = self.model(
                    img,
                    imgsz=self.predict_size,
                    device=self.device,
                    conf=self.conf_thres,
                    verbose=False,
                    half=self.use_half_precision
                )
                
                # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–π
                targets = self.find_targets(results, frame_shape)
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                self.adaptive_confidence_adjustment(targets)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if targets:
                    self.frames_without_targets = 0
                    best_target = targets[0]
                    
                    if self.current_target is None or best_target['priority'] > self.current_target['priority'] * 1.2:
                        self.current_target = best_target
                        self.stats['detections'] += 1
                    
                    self.update_state(BotState.APPROACHING)
                    
                    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
                    collected = self.navigate_to_target(self.current_target, frame_shape)
                    
                    if collected:
                        self.update_state(BotState.COLLECTING)
                        self.current_target = None
                        self.smoothed_target = None
                        time.sleep(0.1)
                        self.update_state(BotState.SEARCHING)
                    else:
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
                        self.update_memory(self.current_target, current_time, frame_shape)
                else:
                    self.frames_without_targets += 1
                    self.update_state(BotState.SEARCHING)
                    
                    if self.frames_without_targets > self.search_threshold:
                        self.search_pattern(current_time)
                    
                    self.current_target = None
                
                # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
                self.clean_memory(current_time)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
                if self.current_target:
                    position = (self.current_target['cx'], self.current_target['cy'])
                    if self.check_stuck(position):
                        self.update_state(BotState.STUCK)
                        self.escape_stuck()
                        self.update_state(BotState.SEARCHING)
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                self.visualize(img, targets, results)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ FPS
                self.frame_counter.log()
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                if int(current_time) % 30 == 0 and int(current_time) != int(prev_time):
                    self.print_stats()
        
        except KeyboardInterrupt:
            print("\n[STOP] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C...")
        except Exception as e:
            print(f"\n[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            print("\n[EXIT] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self.control.release_all_keys()
            self.print_stats()
            if self.show_window:
                cv2.destroyAllWindows()
            print("[EXIT] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    parser = argparse.ArgumentParser(
        description='üöÄ Ultra Bot v3.0 - Ultimate Performance Edition'
    )
    parser.add_argument(
        '--weights', type=str, 
        default='weights/candies_v10.pt',
        help='–ü—É—Ç—å –∫ –≤–µ—Å–∞–º –º–æ–¥–µ–ª–∏'
    )
    parser.add_argument(
        '--player-weights', type=str, default=None,
        help='–ü—É—Ç—å –∫ –≤–µ—Å–∞–º –º–æ–¥–µ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
    )
    parser.add_argument(
        '--conf', type=float, default=0.22,
        help='–ë–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏'
    )
    parser.add_argument(
        '--mode', type=str, default='balanced',
        choices=['speed', 'balanced', 'accuracy'],
        help='–†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
    )
    parser.add_argument(
        '--no-window', action='store_true',
        help='–ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–∫–Ω–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏'
    )
    
    args = parser.parse_args()
    
    if not os.path.exists(args.weights):
        print(f"[ERROR] –í–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {args.weights}")
        return
    
    bot = UltraBot(
        weights_path=args.weights,
        player_weights_path=args.player_weights,
        conf_thres=args.conf,
        show_window=not args.no_window,
        performance_mode=args.mode
    )
    
    bot.run()


if __name__ == '__main__':
    main()
