#!/usr/bin/env python3
"""
–£–õ–¨–¢–†–ê-–ë–û–¢ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—è—á–∏–∫–æ–≤ v6.0 - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
===============================================================================

–ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚úì –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å —Å FP16 –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
‚úì –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π
‚úì Reinforcement Learning –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
‚úì –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —É–≥—Ä–æ–∑
‚úì –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
‚úì –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
‚úì –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –∏ –æ–±—É—á–µ–Ω–∏—è

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 6.0 Ultra
"""

import sys
import os
import argparse
import time
import json
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
from run_enhanced_bot import EnhancedBallBot

class UltraBotLauncher:
    """–£–ª—å—Ç—Ä–∞-–∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞"""

    def __init__(self):
        self.config = self.load_config()
        self.performance_profile = self.detect_system_profile()

    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_path = Path(__file__).parent / "ultra_bot_config.json"
        default_config = {
            "performance_mode": "ultra",
            "ai_enabled": True,
            "adaptive_learning": True,
            "prediction_enabled": True,
            "evasion_system": True,
            "memory_system": True,
            "multi_threading": True,
            "fp16_acceleration": True,
            "dynamic_resolution": True,
            "auto_tuning": True
        }

        if config_path.exists():
            with open(config_path, 'r') as f:
                loaded_config = json.load(f)
                default_config.update(loaded_config)

        return default_config

    def detect_system_profile(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            import torch
            if torch.cuda.is_available():
                gpu_name = torch.cuda.get_device_name(0).lower()
                if 'rtx' in gpu_name or 'gtx 16' in gpu_name or 'gtx 20' in gpu_name:
                    return "high_end"
                elif 'gtx' in gpu_name or 'mx' in gpu_name:
                    return "mid_range"
                else:
                    return "low_end"
            else:
                return "cpu_only"
        except:
            return "cpu_only"

    def get_optimized_weights(self):
        """–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏—Å—Ç–µ–º—ã"""
        weights_dir = Path(__file__).parent / "weights"

        if self.performance_profile in ["high_end", "mid_range"]:
            # –î–ª—è –º–æ—â–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –º–æ–¥–µ–ª–∏
            preferred_weights = ["candies_v10.pt", "ball_rtdetr.pt"]
        else:
            # –î–ª—è —Å–ª–∞–±—ã—Ö —Å–∏—Å—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–≥–∫–∏–µ –º–æ–¥–µ–ª–∏
            preferred_weights = ["1ball_v10.pt", "balls_v10.pt"]

        for weight_file in preferred_weights:
            if (weights_dir / weight_file).exists():
                return str(weights_dir / weight_file)

        # Fallback –∫ –ª—é–±–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É
        for file in weights_dir.glob("*.pt"):
            if "ball" in file.name.lower():
                return str(file)

        return "weights/candies_v10.pt"  # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback

    def get_optimized_parameters(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã"""

        base_params = {
            "high_end": {
                "predict_size": 512,
                "conf": 0.20,
                "frame_skip": 1,
                "player_skip": 3,
                "memory_targets": 12,
                "adaptive_mode": True
            },
            "mid_range": {
                "predict_size": 416,
                "conf": 0.22,
                "frame_skip": 1,
                "player_skip": 4,
                "memory_targets": 10,
                "adaptive_mode": True
            },
            "low_end": {
                "predict_size": 320,
                "conf": 0.25,
                "frame_skip": 2,
                "player_skip": 6,
                "memory_targets": 8,
                "adaptive_mode": True
            },
            "cpu_only": {
                "predict_size": 256,
                "conf": 0.28,
                "frame_skip": 3,
                "player_skip": 8,
                "memory_targets": 6,
                "adaptive_mode": False
            }
        }

        return base_params.get(self.performance_profile, base_params["cpu_only"])

    def create_ultra_bot(self, player_detection=False, show_window=False, save_screenshots=False):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—å—Ç—Ä–∞-–±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""

        print("üöÄ ULTRA BOT v6.0 - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        print(f"üíª –ü—Ä–æ—Ñ–∏–ª—å —Å–∏—Å—Ç–µ–º—ã: {self.performance_profile.upper()}")

        # –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤
        weights_path = self.get_optimized_weights()
        player_weights = "weights/peoples_yolov10m.pt" if player_detection else None

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params = self.get_optimized_parameters()

        print(f"üéØ –ú–æ–¥–µ–ª—å: {Path(weights_path).name}")
        print(f"‚ö° –†–∞–∑–º–µ—Ä –¥–µ—Ç–µ–∫—Ü–∏–∏: {params['predict_size']}")
        print(f"üéöÔ∏è –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {params['conf']}")
        print(f"üß† –ò–ò —Å–∏—Å—Ç–µ–º—ã: {'–í–ö–õ–Æ–ß–ï–ù–´' if self.config['ai_enabled'] else '–û–¢–ö–õ–Æ–ß–ï–ù–´'}")

        if player_weights and Path(player_weights).exists():
            print("ü¶π –†–µ–∂–∏–º –•–∏—â–Ω–∏–∫–∞: –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")
        else:
            print("ü§ñ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º")

        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        bot = EnhancedBallBot(
            weights_path=weights_path,
            player_weights_path=player_weights,
            conf_thres=params['conf'],
            adaptive_mode=params['adaptive_mode'],
            show_window=show_window,
            save_screenshots=save_screenshots
        )

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        bot.frame_skip = params['frame_skip']
        bot.player_detection_skip = params['player_skip']
        bot.target_memory = bot.target_memory.__class__(maxlen=params['memory_targets'])

        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å–∏—Å—Ç–µ–º
        if self.config['ai_enabled']:
            print("üéì –°–∏—Å—Ç–µ–º—ã –ò–ò –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:")
            print("  ‚úì Reinforcement Learning")
            print("  ‚úì –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è")
            print("  ‚úì –°–∏—Å—Ç–µ–º–∞ —É–∫–ª–æ–Ω–µ–Ω–∏—è")
            print("  ‚úì –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å")

        print("\\n" + "="*60)
        print("üéÆ ULTRA BOT –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
        print("üéØ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("="*60 + "\\n")

        return bot

def main():
    parser = argparse.ArgumentParser(description='Ultra Bot v6.0 - Maximum Performance & Intelligence')
    parser.add_argument('--predator', action='store_true',
                       help='–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º –•–∏—â–Ω–∏–∫–∞ (–ø–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤)')
    parser.add_argument('--show', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏')
    parser.add_argument('--save-screenshots', action='store_true',
                       help='–°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π')
    parser.add_argument('--weights', type=str, default=None,
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏')
    parser.add_argument('--conf', type=float, default=None,
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏')
    parser.add_argument('--no-ai', action='store_true',
                       help='–û—Ç–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã –ò–ò')
    parser.add_argument('--performance-test', action='store_true',
                       help='–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')

    args = parser.parse_args()

    # –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—å—Ç—Ä–∞-–∑–∞–≥—Ä—É–∑—á–∏–∫–∞
    launcher = UltraBotLauncher()

    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ò–ò –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if args.no_ai:
        launcher.config['ai_enabled'] = False

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
    if args.weights:
        weights_path = f"weights/{args.weights}"
        if not Path(weights_path).exists():
            print(f"‚ùå –í–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {weights_path}")
            return
    else:
        weights_path = launcher.get_optimized_weights()

    # –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if args.performance_test:
        print("üß™ –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print(f"üíª –°–∏—Å—Ç–µ–º–∞: {launcher.performance_profile.upper()}")

        params = launcher.get_optimized_parameters()
        print(f"‚öôÔ∏è –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {json.dumps(params, indent=2)}")

        # –¢–µ—Å—Ç –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
        try:
            import torch
            from ultralytics import YOLO

            model = YOLO(weights_path)
            if torch.cuda.is_available():
                model.to('cuda')

            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
            dummy_img = torch.randn(1, 3, params['predict_size'], params['predict_size'])
            if torch.cuda.is_available():
                dummy_img = dummy_img.cuda()

            start_time = time.time()
            for _ in range(10):
                _ = model(dummy_img, verbose=False)
            end_time = time.time()

            fps = 10 / (end_time - start_time)
            print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {fps:.1f} FPS")
            print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —É–ª—å—Ç—Ä–∞-–±–æ—Ç–∞
    try:
        bot = launcher.create_ultra_bot(
            player_detection=args.predator,
            show_window=args.show,
            save_screenshots=args.save_screenshots
        )

        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if args.conf:
            bot.base_conf_thres = args.conf
            bot.conf_thres = args.conf

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot.run()

    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è ULTRA BOT –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –≤–µ—Å–∞ –º–æ–¥–µ–ª–µ–π")

if __name__ == '__main__':
    main()