"""
üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç –¥–ª—è Murder Mystery 2 - Ultra Edition v2.0

–û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
‚ú® –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º PID-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º
üéØ –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ —Ü–µ–ª–µ–π
üß† –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ—Ä–æ–≥–æ–≤ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º—É–ª—å—Ç–∏—Å–∫–µ–π–ª –¥–µ—Ç–µ–∫—Ü–∏—è)
üõ°Ô∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω—Ç–∏–∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
üìä –ö—Ä–∞—Å–∏–≤–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üîß –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
"""

import sys
import os
import argparse
import time
import cv2
import numpy as np
import torch
import json
import random
from collections import deque
from datetime import datetime
from enum import Enum

sys.path.insert(0, os.path.dirname(__file__))

from ultralytics import YOLO
from roblox.screen import CaptureStream
from roblox.control import Control
from roblox.utils import FrameCounter

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

class BotState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    SEARCHING = "SEARCHING"      # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–π
    HUNTING = "HUNTING"          # –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
    COLLECTING = "COLLECTING"    # –°–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞
    STUCK = "STUCK"              # –ó–∞—Å—Ç—Ä—è–ª, –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–π—Ç–∏
    ESCAPING = "ESCAPING"        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞–Ω–µ–≤—Ä –≤—ã—Ö–æ–¥–∞

# ==================== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° ====================

class AdvancedMM2Bot:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç –¥–ª—è MM2 —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
    """
    
    def __init__(self, weights_path, conf_thres=0.25, show_window=False, 
                 adaptive_mode=True, performance_mode='balanced'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            weights_path: –ü—É—Ç—å –∫ –≤–µ—Å–∞–º –º–æ–¥–µ–ª–∏
            conf_thres: –ë–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (0.0-1.0)
            show_window: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–∫–Ω–æ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
            adaptive_mode: –í–∫–ª—é—á–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            performance_mode: –†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ('speed', 'balanced', 'accuracy')
        """
        print("=" * 60)
        print("üöÄ –ü–†–û–î–í–ò–ù–£–¢–´–ô MM2 –ë–û–¢ - ULTRA EDITION v2.0")
        print("=" * 60)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        self.device = self._init_device()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        print(f"\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: {weights_path}")
        self.model = YOLO(weights_path).to(self.device)
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏
        self.base_conf_thres = conf_thres
        self.conf_thres = conf_thres
        self.adaptive_mode = adaptive_mode
        self.show_window = show_window
        self.performance_mode = performance_mode
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.predict_size = 416  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._setup_performance_mode()
        
        # –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞
        print("\nüì∑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞...")
        self.stream = CaptureStream("Roblox", saveInterval=0)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        self.control = Control()
        self.frame_counter = FrameCounter()
        self.frame_counter.fps = 0.0
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.state = BotState.SEARCHING
        self.current_target = None
        self.target_history = deque(maxlen=5)
        
        # ============ –ü–†–û–î–í–ò–ù–£–¢–´–ô PID-–ö–û–ù–¢–†–û–õ–õ–ï–† ============
        self.pid_kp = 0.04          # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        self.pid_ki = 0.001        # –ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        self.pid_kd = 0.025        # –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        self.integral = 0.0
        self.prev_error = 0.0
        self.dt = 0.05
        self.integral_limit = 150.0
        self.error_smoothing = deque(maxlen=5)  # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        
        # ============ –ü–ê–†–ê–ú–ï–¢–†–´ –î–í–ò–ñ–ï–ù–ò–Ø ============
        self.min_distance = 50               # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞
        self.turn_threshold = 20              # –ü–æ—Ä–æ–≥ –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞ (–ø–∏–∫—Å–µ–ª–∏)
        self.approach_speed = 0.12           # –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
        self.precision_mode_distance = 100   # –î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        
        # ============ –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ============
        self.conf_history = deque(maxlen=30)
        self.detection_history = deque(maxlen=20)
        self.collection_rate = 0.0
        self.successful_collections = 0
        self.total_attempts = 0
        
        # ============ –ê–ù–¢–ò–ó–ê–°–¢–†–ï–í–ê–ù–ò–ï ============
        self.stuck_frames = 0
        self.stuck_threshold = 12
        self.previous_distance = float('inf')
        self.progress_history = deque(maxlen=10)
        self.escape_cooldown = 3.0
        self.last_escape_time = 0.0
        
        # ============ –ü–û–ò–°–ö ============
        self.frames_without_targets = 0
        self.search_threshold = 8
        self.search_turn_direction = 'turn_right'
        self.search_turn_speed = 0.15
        
        # ============ –ú–£–õ–¨–¢–ò–°–ö–ï–ô–õ –î–ï–¢–ï–ö–¶–ò–Ø ============
        self.multi_scale_enabled = True
        self.base_predict_size = self.predict_size
        self.scale_factors = [1.0, 1.2, 1.5] if self.performance_mode != 'speed' else [1.0]
        self.current_scale = 0
        
        # ============ –ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ê ============
        self.preprocess_enabled = True
        self.contrast_gain = 1.15
        self.brightness_gain = 1.25
        
        # ============ –°–¢–ê–¢–ò–°–¢–ò–ö–ê ============
        self.stats = {
            'start_time': time.time(),
            'detections': 0,
            'collections': 0,
            'search_cycles': 0,
            'stuck_events': 0,
            'avg_confidence': 0.0,
            'total_distance_traveled': 0.0
        }
        
        # ============ –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø ============
        self.show_visualization = show_window
        if self.show_visualization:
            try:
                test_img = np.zeros((100, 100, 3), dtype=np.uint8)
                cv2.imshow('Test', test_img)
                cv2.waitKey(1)
                cv2.destroyAllWindows()
                print("‚úÖ GUI –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            except:
                print("‚ö†Ô∏è GUI –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –æ—Ç–∫–ª—é—á–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é")
                self.show_visualization = False
        
        print("\n" + "=" * 60)
        print("‚úÖ –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
        print(f"üìä –†–µ–∂–∏–º: {performance_mode}, –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π: {adaptive_mode}")
        print(f"üéØ Conf: {self.conf_thres:.2f}, –†–∞–∑–º–µ—Ä: {self.predict_size}")
        print("=" * 60)
        print("\n‚ñ∂Ô∏è  –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
    
    def _init_device(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (GPU/CPU)"""
        if torch.cuda.is_available():
            device = torch.device("cuda:0")
            gpu_name = torch.cuda.get_device_name(0)
            print(f"\nüéÆ GPU –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {gpu_name}")
            return device
        else:
            print("\nüíª –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
            return torch.device("cpu")
    
    def _setup_performance_mode(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        modes = {
            'speed': {'size': 320, 'skip': 2, 'multi_scale': False},
            'balanced': {'size': 416, 'skip': 1, 'multi_scale': True},
            'accuracy': {'size': 512, 'skip': 0, 'multi_scale': True}
        }
        
        config = modes.get(self.performance_mode, modes['balanced'])
        self.predict_size = config['size']
        self.frame_skip = config['skip']
        if not config['multi_scale']:
            self.scale_factors = [1.0]
    
    def preprocess_frame(self, img):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞"""
        if not self.preprocess_enabled:
            return img
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ HSV –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV).astype(np.float32)
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —è—Ä–∫–æ—Å—Ç–∏
        hsv[:, :, 1] = np.clip(hsv[:, :, 1] * self.contrast_gain, 0, 255)
        hsv[:, :, 2] = np.clip(hsv[:, :, 2] * self.brightness_gain, 0, 255)
        
        # –û–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        enhanced = cv2.cvtColor(hsv.astype(np.uint8), cv2.COLOR_HSV2BGR)
        return enhanced
    
    def run_multi_scale_detection(self, img):
        """
        –ú—É–ª—å—Ç–∏—Å–∫–µ–π–ª –¥–µ—Ç–µ–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        """
        best_targets = []
        best_results = None
        
        for scale_factor in self.scale_factors:
            size = int(self.base_predict_size * scale_factor)
            # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ 32
            size = (size // 32) * 32
            if size < 32:
                size = 32
            
            try:
                results = self.model(
                    img,
                    imgsz=size,
                    device=self.device,
                    conf=self.conf_thres * (0.95 if scale_factor > 1.0 else 1.0),
                    verbose=False,
                    half=self.device.type == 'cuda'
                )
                
                targets = self.find_targets(results, img.shape)
                if targets and (not best_targets or targets[0]['priority'] > best_targets[0]['priority']):
                    best_targets = targets
                    best_results = results
                    break  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–∞ –ø–µ—Ä–≤–æ–º –º–∞—Å—à—Ç–∞–±–µ, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                    
            except Exception as e:
                continue
        
        return best_targets, best_results
    
    def find_targets(self, results, frame_shape, max_targets=3):
        """
        –ü–æ–∏—Å–∫ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Ü–µ–ª–µ–π
        """
        frame_h, frame_w = frame_shape[:2]
        center_x = frame_w / 2
        center_y = frame_h / 2
        
        targets = []
        
        if results and len(results) > 0 and results[0].boxes is not None:
            boxes = results[0].boxes
            
            for i in range(len(boxes)):
                conf = float(boxes.conf[i].item())
                cls = int(boxes.cls[i].item())
                
                if cls == 0 and conf >= self.conf_thres:
                    xyxy = boxes.xyxy[i].cpu().numpy()
                    x1, y1, x2, y2 = xyxy
                    
                    cx = (x1 + x2) / 2
                    cy = (y1 + y2) / 2
                    
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
                    norm_x = cx / frame_w
                    norm_y = cy / frame_h
                    
                    if norm_y < 0.25 or norm_x < 0.1 or norm_x > 0.9:
                        continue
                    
                    # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞
                    distance = np.sqrt((cx - center_x)**2 + (cy - center_y)**2)
                    
                    # –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                    priority = self.calculate_priority(cx, cy, conf, distance, center_x, center_y)
                    
                    targets.append({
                        'cx': cx,
                        'cy': cy,
                        'conf': conf,
                        'distance': distance,
                        'priority': priority,
                        'bbox': (x1, y1, x2, y2)
                    })
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        targets.sort(key=lambda t: t['priority'], reverse=True)
        return targets[:max_targets]
    
    def calculate_priority(self, cx, cy, conf, distance, center_x, center_y):
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ü–µ–ª–∏
        
        –£—á–∏—Ç—ã–≤–∞–µ—Ç:
        - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏
        - –ë–ª–∏–∑–æ—Å—Ç—å –∫ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
        - –ë–ª–∏–∑–æ—Å—Ç—å –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        - –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ (–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏)
        """
        priority = conf * 100.0  # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        
        # –ë–æ–Ω—É—Å –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å –∫ —Ü–µ–Ω—Ç—Ä—É (X)
        center_dist_x = abs(cx - center_x)
        priority += max(0, 50 - center_dist_x / 8)
        
        # –ë–æ–Ω—É—Å –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å –∫ —Ü–µ–Ω—Ç—Ä—É (Y) - —É—Å–∏–ª–µ–Ω–Ω—ã–π
        center_dist_y = abs(cy - center_y)
        priority += max(0, 70 - center_dist_y / 5) * 1.5
        
        # –ë–æ–Ω—É—Å –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å (–æ–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ)
        priority += max(0, 100 - distance / 6)
        
        # –ë–æ–Ω—É—Å –∑–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        priority += conf * 30
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        frame_h = center_y * 2  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–∞–¥—Ä–∞
        if cy < frame_h * 0.3:
            priority *= 0.7
        
        return priority
    
    def adaptive_confidence_adjustment(self, targets):
        """
        –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        """
        if not self.adaptive_mode:
            return
        
        if len(targets) > 0:
            # –ï—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö –∫–∞—á–µ—Å—Ç–≤–æ
            avg_conf = np.mean([t['conf'] for t in targets])
            self.conf_history.append(avg_conf)
            
            if len(self.conf_history) >= 10:
                recent_avg = np.mean(list(self.conf_history)[-10:])
                
                if recent_avg > 0.65:  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    self.conf_thres = min(0.4, self.base_conf_thres + 0.08)
                elif recent_avg < 0.4:  # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    self.conf_thres = max(0.15, self.base_conf_thres - 0.06)
                else:
                    self.conf_thres = self.base_conf_thres
        
        else:
            # –ù–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–π - —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞
            self.frames_without_targets += 1
            if self.frames_without_targets > 15:
                self.conf_thres = max(0.12, self.base_conf_thres - 0.08)
    
    def move_to_target(self, target, frame_shape):
        """
        –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º PID-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º
        """
        frame_h, frame_w = frame_shape[:2]
        center_x = frame_w / 2
        center_y = frame_h / 2
        
        cx = target['cx']
        cy = target['cy']
        distance = target['distance']
        conf = target['conf']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
        if distance < self.min_distance:
            self.control.release_all_keys()
            time.sleep(0.15)  # –ü–∞—É–∑–∞ –¥–ª—è —Å–±–æ—Ä–∞
            self.state = BotState.COLLECTING
            self.successful_collections += 1
            self.total_attempts += 1
            print(f"‚úÖ –°–ë–û–†! Conf: {conf:.2f}, Dist: {distance:.1f}px")
            return True
        
        # –†–∞—Å—á–µ—Ç –æ—à–∏–±–∫–∏ —Å —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ–º
        error = cx - center_x
        self.error_smoothing.append(error)
        smoothed_error = np.mean(self.error_smoothing)
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π PID-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        self.integral += smoothed_error * self.dt
        self.integral = np.clip(self.integral, -self.integral_limit, self.integral_limit)
        
        derivative = (smoothed_error - self.prev_error) / max(self.dt, 0.01)
        pid_output = (self.pid_kp * smoothed_error + 
                     self.pid_ki * self.integral + 
                     self.pid_kd * derivative)
        
        self.prev_error = smoothed_error
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–≤–æ—Ä–æ—Ç–∞
        turn_strength = min(abs(pid_output) / 50.0, 1.0)
        turn_duration = 0.05 + (turn_strength * 0.15)
        
        # –†–µ–∂–∏–º —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –±–ª–∏–∑–∫–æ–º –ø–æ–¥—Ö–æ–¥–µ
        if distance < self.precision_mode_distance:
            turn_duration *= 0.7  # –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –∏ —Ç–æ—á–Ω–µ–µ
        
        # –î–≤–∏–∂–µ–Ω–∏–µ
        self.control.release_all_keys()
        self.control.press('up')  # –í—Å–µ–≥–¥–∞ –¥–≤–∏–∂–µ–º—Å—è –≤–ø–µ—Ä–µ–¥
        
        if abs(smoothed_error) > self.turn_threshold:
            if smoothed_error < 0:
                self.control.press('left')
            else:
                self.control.press('right')
        
        time.sleep(float(turn_duration))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
        progress = distance < self.previous_distance - 3.0
        self.progress_history.append(progress)
        
        if progress:
            self.stuck_frames = 0
        else:
            self.stuck_frames += 1
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        old_distance = self.previous_distance
        self.previous_distance = distance
        if old_distance != float('inf'):
            self.stats['total_distance_traveled'] += max(0, old_distance - distance)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
        if self.stuck_frames >= self.stuck_threshold:
            print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ!")
            self.state = BotState.STUCK
            self.stats['stuck_events'] += 1
            return False
        
        return False
    
    def perform_escape_maneuver(self):
        """
        –ú–∞–Ω–µ–≤—Ä –≤—ã—Ö–æ–¥–∞ –∏–∑ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
        """
        now = time.time()
        if now - self.last_escape_time < self.escape_cooldown:
            return
        
        print("üîß –í—ã–ø–æ–ª–Ω—è—é –º–∞–Ω–µ–≤—Ä –≤—ã—Ö–æ–¥–∞...")
        self.state = BotState.ESCAPING
        self.last_escape_time = now
        
        self.control.release_all_keys()
        
        # 1. –û—Ç—ä–µ–∑–¥ –Ω–∞–∑–∞–¥
        self.control.press('down')
        time.sleep(0.3)
        self.control.release_all_keys()
        
        # 2. –ü–æ–≤–æ—Ä–æ—Ç
        turn_dir = random.choice(['turn_left', 'turn_right'])
        self.control.press(turn_dir)
        time.sleep(0.4)
        self.control.release_all_keys()
        
        # 3. –ü—Ä—ã–∂–æ–∫ –∏ –¥–≤–∏–∂–µ–Ω–∏–µ
        self.control.press('jump')
        self.control.press('up')
        time.sleep(0.2)
        self.control.release_all_keys()
        
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.stuck_frames = 0
        self.previous_distance = float('inf')
        self.integral = 0.0
        self.prev_error = 0.0
        self.error_smoothing.clear()
        
        time.sleep(0.3)
        self.state = BotState.SEARCHING
    
    def search_mode(self):
        """
        –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ —Ü–µ–ª–µ–π
        """
        self.control.release_all_keys()
        
        # –ú–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.control.press(self.search_turn_direction)
        time.sleep(self.search_turn_speed)
        self.control.release_all_keys()
        time.sleep(0.05)
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä—ã–∂–∫–∏
        if self.frames_without_targets % 15 == 0:
            self.control.press('jump')
            time.sleep(0.1)
            self.control.release_all_keys()
        
        # –°–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if self.frames_without_targets % 30 == 0:
            self.search_turn_direction = 'turn_left' if self.search_turn_direction == 'turn_right' else 'turn_right'
    
    def visualize_frame(self, img, targets, results):
        """
        –ö—Ä–∞—Å–∏–≤–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–¥—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        if not self.show_visualization:
            return
        
        try:
            # –†–∏—Å—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏–∏
            if results and len(results) > 0:
                annotated = results[0].plot()
            else:
                annotated = img.copy()
            
            h, w = annotated.shape[:2]
            
            # –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
            cv2.drawMarker(annotated, (w // 2, h // 2), (0, 255, 255), 
                          cv2.MARKER_CROSS, 20, 2)
            
            # –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å
            if self.current_target:
                tx = int(self.current_target['cx'])
                ty = int(self.current_target['cy'])
                cv2.circle(annotated, (tx, ty), 15, (0, 255, 0), 3)
                cv2.circle(annotated, (tx, ty), 5, (0, 255, 0), -1)
                
                # –õ–∏–Ω–∏—è –∫ —Ü–µ–ª–∏
                cv2.line(annotated, (w // 2, h // 2), (tx, ty), (0, 255, 0), 2)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
            state_color = {
                BotState.SEARCHING: (255, 165, 0),   # –û—Ä–∞–Ω–∂–µ–≤—ã–π
                BotState.HUNTING: (0, 255, 0),       # –ó–µ–ª–µ–Ω—ã–π
                BotState.COLLECTING: (0, 255, 255),  # –ñ–µ–ª—Ç—ã–π
                BotState.STUCK: (0, 0, 255),         # –ö—Ä–∞—Å–Ω—ã–π
                BotState.ESCAPING: (255, 0, 255)     # –†–æ–∑–æ–≤—ã–π
            }
            
            state_text = f"STATE: {self.state.value}"
            cv2.putText(annotated, state_text, (10, 30), 
                       cv2.FONT_HERSHEY_BOLD, 1.0, state_color.get(self.state, (255, 255, 255)), 2)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            info_y = 60
            info_lines = [
                f"FPS: {self.frame_counter.fps:.1f}",
                f"Conf: {self.conf_thres:.2f}",
                f"Targets: {len(targets)}",
                f"Collections: {self.successful_collections}",
                f"Success Rate: {(self.successful_collections/max(1, self.total_attempts)*100):.1f}%"
            ]
            
            for line in info_lines:
                cv2.putText(annotated, line, (10, info_y), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
                info_y += 25
            
            # –ü–æ–∫–∞–∑ –æ–∫–Ω–∞
            cv2.imshow('Advanced MM2 Bot - Ultra Edition', annotated)
            
            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                return True  # –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            
        except Exception as e:
            print(f"[WARN] –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        
        return False
    
    def print_statistics(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        runtime = time.time() - self.stats['start_time']
        
        print("\n" + "=" * 60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–¢–´ –ë–û–¢–ê")
        print("=" * 60)
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime:.1f} —Å–µ–∫—É–Ω–¥ ({runtime/60:.1f} –º–∏–Ω—É—Ç)")
        print(f"üéØ –î–µ—Ç–µ–∫—Ü–∏–π: {self.stats['detections']}")
        print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ: {self.successful_collections}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(self.successful_collections/max(1, self.total_attempts)*100):.1f}%")
        print(f"üîÑ –¶–∏–∫–ª–æ–≤ –ø–æ–∏—Å–∫–∞: {self.stats['search_cycles']}")
        print(f"‚ö†Ô∏è  –ó–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–π: {self.stats['stuck_events']}")
        print(f"üìä –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.stats['avg_confidence']:.3f}")
        print(f"üéÆ FPS: {self.frame_counter.fps:.1f}")
        print("=" * 60)
    
    def run(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        """
        frame_count = 0
        
        try:
            prev_time = time.time()
            
            for img, img0 in self.stream:
                current_time = time.time()
                self.dt = current_time - prev_time
                prev_time = current_time
                
                frame_count += 1
                
                # –ü—Ä–æ–ø—É—Å–∫ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if frame_count % (self.frame_skip + 1) != 0 and self.current_target:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–ª—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
                    if self.state == BotState.HUNTING and self.current_target:
                        self.move_to_target(self.current_target, img.shape)
                    continue
                
                # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
                processed_img = self.preprocess_frame(img)
                
                # –î–µ—Ç–µ–∫—Ü–∏—è
                targets, results = self.run_multi_scale_detection(processed_img)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                if targets:
                    self.stats['detections'] += 1
                    avg_conf = np.mean([t['conf'] for t in targets])
                    self.stats['avg_confidence'] = (self.stats['avg_confidence'] * (self.stats['detections'] - 1) + avg_conf) / self.stats['detections']
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                self.adaptive_confidence_adjustment(targets)
                
                # ============ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø–ú–ò ============
                
                if targets:
                    # –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª—å - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ—Ö–æ—Ç—ã
                    best_target = targets[0]
                    
                    if self.state != BotState.HUNTING or self.current_target != best_target:
                        self.state = BotState.HUNTING
                        self.current_target = best_target
                        self.frames_without_targets = 0
                    
                    # –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
                    collected = self.move_to_target(best_target, img.shape)
                    
                    if collected:
                        self.state = BotState.SEARCHING
                        self.current_target = None
                        time.sleep(0.2)  # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞
                
                elif self.state == BotState.HUNTING:
                    # –ü–æ—Ç–µ—Ä—è–ª–∏ —Ü–µ–ª—å
                    self.frames_without_targets += 1
                    if self.frames_without_targets >= 3:
                        self.state = BotState.SEARCHING
                        self.current_target = None
                
                elif self.state == BotState.SEARCHING:
                    self.search_mode()
                    self.frames_without_targets += 1
                    if self.frames_without_targets >= self.search_threshold:
                        self.stats['search_cycles'] += 1
                
                elif self.state == BotState.STUCK:
                    self.perform_escape_maneuver()
                
                elif self.state == BotState.COLLECTING:
                    self.state = BotState.SEARCHING
                    self.current_target = None
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                if self.show_visualization:
                    if self.visualize_frame(img, targets, results):
                        break  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ 'q'
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ FPS
                self.frame_counter.log()
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if int(current_time) % 30 == 0 and int(current_time) != int(prev_time):
                    self.print_statistics()
        
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
        
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self.control.release_all_keys()
            self.print_statistics()
            if self.show_visualization:
                cv2.destroyAllWindows()
            print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n")


# ==================== –¢–û–ß–ö–ê –í–•–û–î–ê ====================

def main():
    parser = argparse.ArgumentParser(
        description='üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π MM2 –ë–æ—Ç - Ultra Edition v2.0',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python run_advanced_bot.py --weights weights/candies_v10.pt --conf 0.25
  python run_advanced_bot.py --weights weights/candies_v10.pt --show --mode accuracy
  python run_advanced_bot.py --weights weights/candies_v10.pt --no-adaptive --mode speed
        """
    )
    
    parser.add_argument('--weights', type=str, 
                       default='weights/candies_v10.pt',
                       help='–ü—É—Ç—å –∫ –≤–µ—Å–∞–º –º–æ–¥–µ–ª–∏')
    
    parser.add_argument('--conf', type=float, default=0.25,
                       help='–ë–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (0.0-1.0)')
    
    parser.add_argument('--show', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π')
    
    parser.add_argument('--mode', type=str, 
                       choices=['speed', 'balanced', 'accuracy'],
                       default='balanced',
                       help='–†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
    
    parser.add_argument('--no-adaptive', action='store_true',
                       help='–û—Ç–∫–ª—é—á–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –≤–µ—Å–æ–≤
    if not os.path.exists(args.weights):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –≤–µ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.weights}")
        print("\nüìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Å–∞:")
        weights_dir = os.path.join(os.path.dirname(__file__), 'weights')
        if os.path.exists(weights_dir):
            for f in os.listdir(weights_dir):
                if f.endswith('.pt'):
                    print(f"  - {f}")
        return
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = AdvancedMM2Bot(
        weights_path=args.weights,
        conf_thres=args.conf,
        show_window=args.show,
        adaptive_mode=not args.no_adaptive,
        performance_mode=args.mode
    )
    
    bot.run()


if __name__ == '__main__':
    main()
